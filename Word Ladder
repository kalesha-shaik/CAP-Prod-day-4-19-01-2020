public class Solution {
  public  int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(!wordList.contains(endWord)){
            return 0;
        }
        Queue<String> q = new LinkedList<>();
        q.add(beginWord);
        wordList.remove(beginWord);
        int steps = 0;
        while(!q.isEmpty()){
            int size=q.size();
            while(size-->0){
                String word=q.poll();
                if(word.equals(endWord)){
                    return steps+1;
                }
                List<String> removed=new ArrayList<>();
                for(String str:wordList){
                    int mis=0;
                    for(int i=0;i<str.length();i++){
                        if(str.charAt(i)==word.charAt(i)){
                            continue;
                        }else{
                            mis++;
                        }

                        if(mis > 1){
                            break;
                        }
                    }
                    if(mis == 1 || mis == 0){
                        q.add(str);
                        removed.add(str);
                    }
                }
                for(String rm:removed){
                    wordList.remove(rm);
                }
            }
            steps++;
        }
        return 0;
    }
}
