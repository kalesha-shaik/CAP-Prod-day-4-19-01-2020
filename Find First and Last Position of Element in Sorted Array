// https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/


class Solution {
    public int[] searchRange(int[] nums, int target) 
    {
        int[] res = new int[2];
        Arrays.fill(res, -1);
        if (nums == null || nums.length == 0) return res;
        int L = 0, R = nums.length -1;
        int fL = 0, fR = R;
        while (fL < fR)
        { 
            int mid = fL + (fR - fL) / 2;
            if (target < nums[mid]) {
                fR = mid;
            } else {
                fL = mid + 1;
            }
        }
        if (nums[fL] == target){
            res[1] = fL;
        }
        else if (fL - 1 >= 0 && nums[fL-1] == target){
            res[1] = fL-1;
         }
        fL = 0;
        fR = R;
        while (fL <= fR) 
        { 
            int mid = fL + (fR - fL) / 2;
            if (mid + 1 < nums.length && nums[mid+1] == target && nums[mid] != target)
            {
                res[0] = mid+1;
                break;
            }

            if (mid +1 >= nums.length && nums[mid] == target) 
            {
                res[0] = mid;
                break;
            }


            if (mid +1 >= nums.length) 
            {
                return res;
            }

            if (mid + 1 < nums.length && target <= nums[mid+1]) 
            {
                fR = mid - 1;
            } 
            else if (mid + 1 < nums.length && target > nums[mid+1]) 
            {
                fL = mid + 1;
            }
        }

        if (nums[fL] == target){
            res[0] = fL;
        }


        return res;
    }
}
